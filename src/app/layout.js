"use client";

import { Provider } from "react-redux";
import { SnackbarProvider } from "notistack";
import { ThemeProvider } from "@mui/material/styles";
import { Inter } from "next/font/google";
import "./globals.css";
import React, { useCallback, useEffect, useState } from "react";
import AppBar from "@mui/material/AppBar";
import Box from "@mui/material/Box";
import Drawer from "@mui/material/Drawer";
import List from "@mui/material/List";
import ListItem from "@mui/material/ListItem";
import ListItemText from "@mui/material/ListItemText";
import Toolbar from "@mui/material/Toolbar";
import Typography from "@mui/material/Typography";
import {
  Avatar,
  Button,
  CircularProgress,
  Grid,
  InputAdornment,
  Menu,
  MenuItem,
  TextField,
  Tooltip,
  useMediaQuery,
  useTheme,
} from "@mui/material";
import Link from "next/link";
import Image from "next/image";
// icons
import MenuIcon from "@mui/icons-material/Menu";
import ListItemButton from "@mui/material/ListItemButton";
import IconButton from "@mui/material/IconButton";
import ListItemIcon from "@mui/material/ListItemIcon";
import { Add, Visibility, VisibilityOff } from "@mui/icons-material";
import { ToastContainer, toast } from "react-toastify";
import store from "../store";
import {
  useLoginUserDataMutation,
  useResetPasswordMutation,
} from "@/reduxSlice/apiSlice";
import themeFont from "../theme";
import "react-toastify/dist/ReactToastify.css";
import { usePathname, useRouter } from "next/navigation";
import PersonAddAlt1Icon from "@mui/icons-material/PersonAddAlt1";
import PeopleIcon from "@mui/icons-material/People";
import TextSnippetIcon from "@mui/icons-material/TextSnippet";
import ManageAccountsIcon from "@mui/icons-material/ManageAccounts";
import NoAccountsRoundedIcon from "@mui/icons-material/NoAccountsRounded";
import HistoryRoundedIcon from "@mui/icons-material/HistoryRounded";
import DashboardIcon from "@mui/icons-material/Dashboard";
import { ProfileInfo } from "./components/ProfileBtn";
import LoginBanner from "../../public/loginBanner2.png";
import { permissionKeyNames } from "../../shared/cpNamings";

const inter = Inter({ subsets: ["latin"] });

// export const metadata = {
// title: "Create Next App",
// description: "Generated by create next app",
// };

// drawer-size
const drawerWidth = 250;

// sidebar datas
const sidebarlist = [
  {
    title: "User Management",
    url: "usermanagement",
    insideUrl: "adduser",
    icon: PeopleIcon,
    shortName: permissionKeyNames?.userManagement,
  },
  {
    title: "CP Management",
    url: "cpmanagement",
    insideUrl: "addcp",
    icon: PersonAddAlt1Icon,
    shortName: permissionKeyNames?.cpManagement,
  },
];
const superAdminOnly = [
  // {
  //   title: "Permission",
  //   url: "permission",
  //   insideUrl: "edit",
  //   icon: NoAccountsRoundedIcon,
  // },
  {
    title: "Activity",
    url: "activity",
    icon: HistoryRoundedIcon,
  },
];

// login function
function Login() {
  const router = useRouter();
  const [formData, setFormData] = useState({
    name: "",
    password: "",
  });
  const [userData, setUserData] = useState({
    newPassword: "",
    confirmPassword: "",
  });
  const [user, setUser] = useState(null);

  // console.log(user);
  const [loginInProgress, setLoginInProgress] = useState(false);
  const [isPasswordMismatch, setIsPasswordMismatch] = useState(false);
  const [loginPassword, setLoginPassword] = useState("");

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData((prevData) => ({
      ...prevData,
      [name]: value,
    }));
  };

  const handleInputChangeUser = (e) => {
    const { name, value } = e.target;
    setUserData((prevData) => ({
      ...prevData,
      [name]: value,
    }));
  };

  const [loginUserData] = useLoginUserDataMutation();
  const handleSubmit = useCallback(
    async (e) => {
      // e.preventDefault();

      try {
        setLoginInProgress(true);
        const result = await loginUserData(formData);
        // console.log(result?.data?.result?.userData?.isFirstSignIn);

        if (result?.data?.status === 200) {
          localStorage.setItem(
            "user",
            JSON.stringify(result.data.result.userData)
          );
          // console.log(result?.data?.isFirstSignIn);
          if (result?.data?.result?.userData?.isFirstSignIn === true) {
            toast.success("Reset Your Password!");
          }
          if (result?.data?.result?.userData?.isFirstSignIn === false) {
            toast.success("Login Success!");
          }
          const userResult = localStorage.getItem("user");
          setUser(JSON.parse(userResult));
          setLoginPassword(formData.password);
        } else {
          toast.error("Login failed. Please check your credentials.");
        }
      } catch (error) {
        console.error("Form submission failed", error);
        toast.error("Form submission failed. Please try again.");
      } finally {
        setLoginInProgress(false);
      }
    },
    [formData, setLoginPassword, setLoginInProgress]
  );

  useEffect(() => {
    // console.log(user);
    if (user?.isFirstSignIn === false) {
      window.location.href = "leads";
    }
  }, [user, userData]);

  // console.log(user);
  const [resetPassword] = useResetPasswordMutation();
  const handleSubmitPassword = useCallback(async () => {
    if (userData.newPassword !== userData.confirmPassword) {
      setIsPasswordMismatch(true);
      toast.error("Passwords do not match!");
      return;
    }
    const result = {
      newPassword: userData.confirmPassword,
      password: loginPassword,
      id: user?.id,
    };
    const finalResult = await resetPassword(result);
    if (finalResult?.data?.status === 200) {
      localStorage.setItem("user", JSON.stringify(finalResult?.data?.result));
      toast.success("Login Success!");
      router.push("/leads");
      setTimeout(() => {
        window.location.reload();
      }, 1800);
    }
    // console.log(finalResult);
  }, [userData]);

  const [showPassword, setShowPassword] = useState(false);
  const toggleShowPassword = () => {
    setShowPassword(!showPassword);
  };

  const handleBackLogin = () => {
    localStorage.removeItem("user");
    window.location.reload();
  };

  const handleKeyPress = (event) => {
    if (event.key === "Enter") {
      handleSubmit();
    }
  };

  useEffect(() => {
    window.addEventListener("keypress", handleKeyPress);

    return () => {
      window.removeEventListener("keypress", handleKeyPress);
    };
  }, [formData]);

  return (
    <>
      <ToastContainer />
      {user?.isFirstSignIn === false || user === null ? (
        <Box
          sx={{
            display: "flex",
            justifyContent: "space-around",
            alignItems: "center",
            width: "100%",
            height: "100%",
            flexDirection: "column",
          }}
        >
          <Typography>SIGN IN TO CONTINUE</Typography>
          <Box
            width={{
              width: "100%",
              display: "flex",
              justifyContent: "center",
            }}
          >
            <TextField
              sx={{
                width: "90%",
                "& .MuiOutlinedInput-root .MuiOutlinedInput-notchedOutline": {
                  borderRadius: "19px",
                },
              }}
              name="name"
              label="Username / Email / Phone"
              variant="outlined"
              onChange={handleInputChange}
            />
          </Box>
          <Box
            width={{
              width: "100%",
              display: "flex",
              justifyContent: "center",
            }}
          >
            <TextField
              sx={{
                width: "90%",
                // padding: "5px",
                "& .MuiOutlinedInput-root .MuiOutlinedInput-notchedOutline": {
                  borderRadius: "19px",
                },
              }}
              name="password"
              label="Password"
              type={showPassword ? "text" : "password"}
              variant="outlined"
              onChange={handleInputChange}
              InputProps={{
                endAdornment: (
                  <InputAdornment position="end">
                    <IconButton onClick={toggleShowPassword} edge="end">
                      {showPassword ? <Visibility /> : <VisibilityOff />}
                    </IconButton>
                  </InputAdornment>
                ),
              }}
            />
          </Box>
          <Button
            sx={{
              // border: "1px solid black",
              width: "90%",
              backgroundColor: "black",
              color: "white",
              height: "45px",
              borderRadius: "20px",
              "&:hover": {
                backgroundColor: "black",
                boxShadow: "none",
                border: "none",
              },
            }}
            onClick={handleSubmit}
            disabled={loginInProgress}
          >
            {loginInProgress ? (
              <Typography sx={{ color: "gray" }}>Logging in...</Typography>
            ) : (
              <Typography sx={{ color: "white" }}>Login</Typography>
            )}
          </Button>
        </Box>
      ) : (
        <Box
          sx={{
            display: "flex",
            justifyContent: "space-around",
            alignItems: "center",
            width: "100%",
            height: "100%",
            flexDirection: "column",
          }}
        >
          <Typography>Reset password</Typography>
          <Box
            width={{
              width: "100%",
              display: "flex",
              justifyContent: "center",
            }}
          >
            <TextField
              sx={{
                width: "90%",
                "& .MuiOutlinedInput-root .MuiOutlinedInput-notchedOutline": {
                  borderRadius: "19px",
                },
              }}
              name="newPassword"
              type="password"
              label="Password"
              value={userData.newPassword}
              variant="outlined"
              onChange={handleInputChangeUser}
            />
          </Box>
          <Box
            width={{
              width: "100%",
              display: "flex",
              justifyContent: "center",
            }}
          >
            <TextField
              sx={{
                width: "90%",
                // padding: "5px",
                "& .MuiOutlinedInput-root .MuiOutlinedInput-notchedOutline": {
                  borderRadius: "19px",
                },
              }}
              name="confirmPassword"
              label="Confirm Password"
              type={showPassword ? "text" : "password"}
              variant="outlined"
              value={userData.confirmPassword}
              onChange={handleInputChangeUser}
              InputProps={{
                endAdornment: (
                  <InputAdornment position="end">
                    <IconButton onClick={toggleShowPassword} edge="end">
                      {showPassword ? <Visibility /> : <VisibilityOff />}
                    </IconButton>
                  </InputAdornment>
                ),
              }}
            />
          </Box>
          <Typography
            sx={{
              // border: "1px solid black",
              width: "90%",
              textAlign: "end",
              fontSize: "14px",
            }}
          >
            <Button
              onClick={handleBackLogin}
              sx={{ color: "black", fontSize: "12px" }}
            >
              Back to Login ?
            </Button>
          </Typography>
          <Button
            sx={{
              // border: "1px solid black",
              width: "90%",
              backgroundColor: "black",
              color: "white",
              height: "45px",
              borderRadius: "20px",
              "&:hover": {
                backgroundColor: "black",
                boxShadow: "none",
                border: "none",
              },
            }}
            onClick={handleSubmitPassword}
            disabled={loginInProgress}
          >
            <Typography sx={{ color: "white" }}>Confirm</Typography>
          </Button>
        </Box>
      )}
    </>
  );
}

export default function RootLayout({ children }) {
  const theme = useTheme();
  const [mobileOpen, setMobileOpen] = useState(false);
  const [permissions, setPermissions] = useState([]);
  const isLargeScreen = useMediaQuery(theme.breakpoints.up("sm"));
  const [loading, setLoading] = useState(true);
  const [isRoleBranchHead, setIsRoleBranchHead] = useState([]);
  const [roleBranchHeadId, setRoleBranchHeadId] = useState([]);

  const pathname = usePathname();
  const router = useRouter();
  // handle drawer functions
  const handleDrawerToggle = () => {
    setMobileOpen(!mobileOpen);
  };

  const [user, setUser] = useState(null);

  const drawer = (
    <Grid sx={{ height: "100vh", borderRight: "1px solid lightgrey" }}>
      <Grid
        sx={{
          height: "89px",
          borderBottom: "1px solid lightgrey",
          display: "flex",
          justifyContent: "center",
          alignItems: "center",
        }}
      >
        <Grid
          sx={{
            width: "200px",
            height: "50px",
            // border: "1px solid lightgrey",
            display: "flex",
            justifyContent: "center",
            // alignItems: "center",
          }}
        >
          <Link href="/leads">
            <Image
              priority
              src="/Logo.svg"
              alt="Logo"
              width={120}
              height={60}
            />
          </Link>
        </Grid>
      </Grid>
      <List>
        {/* <Link href="/">
          <ListItem
            disablePadding
            style={{
              textDecoration: "none",
              color: "black",
              backgroundColor:
                pathname === "/" ? "rgba(250, 185, 0, 0.15)" : "transparent",
              borderRight:
                pathname === "/" ? "2px solid rgba(250, 185, 0, 1)" : "none",
            }}
          >
            <ListItemButton>
              <ListItemIcon>{React.createElement(DashboardIcon)}</ListItemIcon>
              <ListItemText primary="Dashboard" />
            </ListItemButton>
          </ListItem>
        </Link> */}
        <Link href="/leads" style={{ color: "none", textDecoration: "none" }}>
          <ListItem
            disablePadding
            style={{
              textDecoration: "none",
              color: "black",
              backgroundColor:
                pathname === "/leads" || pathname === "/leads/addleads"
                  ? "rgba(250, 185, 0, 0.15)"
                  : "transparent",
              borderRight:
                pathname === "/leads" || pathname === "/leads/addleads"
                  ? "2px solid rgba(250, 185, 0, 1)"
                  : "none",
            }}
          >
            <ListItemButton>
              <ListItemIcon>
                {React.createElement(TextSnippetIcon)}
              </ListItemIcon>
              {/* <ListItemText  primary="Leads list" /> */}
              <Typography sx={{ fontSize: "15px" }}>Leads List</Typography>
            </ListItemButton>
          </ListItem>
        </Link>
        {isRoleBranchHead[0] === "CP Branch Head" && (
          <Link
            href={`/cpmanagement/view?id=${roleBranchHeadId}`}
            style={{ textDecoration: "none" }}
          >
            <ListItem
              disablePadding
              style={{
                textDecoration: "none",
                color: "black",
                // backgroundColor:
                //   pathname === `/cpmanagement/view?id=${roleBranchHeadId}`
                //     ? "red"
                //     : "transparent",
                backgroundColor:
                  pathname === "/cpmanagement/view"
                    ? "rgba(250, 185, 0, 0.15)"
                    : "transparent",
                borderRight:
                  pathname === `/cpmanagement/view`
                    ? "2px solid rgba(250, 185, 0, 1)"
                    : "white",
              }}
            >
              <ListItemButton>
                <ListItemIcon>
                  {React.createElement(ManageAccountsIcon)}
                </ListItemIcon>
                {/* <ListItemText  primary="Leads list" /> */}
                <Typography sx={{ fontSize: "15px" }}>Manage CP</Typography>
              </ListItemButton>
            </ListItem>
          </Link>
        )}

        {sidebarlist
          .filter((item) => permissions.includes(item.shortName))
          .map((item) => (
            <Link
              key={item.shortName}
              href={`/${item.url}`}
              style={{
                textDecoration: "none",
              }}
            >
              <ListItem
                disablePadding
                style={{
                  textDecoration: "none",
                  color: "black",
                  backgroundColor:
                    pathname === `/${item.url}` ||
                    pathname === `/${item.url}/${item.insideUrl}`
                      ? "rgba(250, 185, 0, 0.15)"
                      : "transparent",
                  borderRight:
                    pathname === `/${item.url}` ||
                    pathname === `/${item.url}/${item.insideUrl}`
                      ? "2px solid rgba(250, 185, 0, 1)"
                      : "none",
                  "&:hover": {
                    textDecoration: "none",
                  },
                }}
              >
                <ListItemButton
                // key={item.title}
                // sx={{
                //   "&:hover": {
                //     textDecoration: "none",
                //   },
                // }}
                >
                  <ListItemIcon>{React.createElement(item.icon)}</ListItemIcon>
                  <Typography sx={{ fontSize: "15px" }}>
                    {item.title}
                  </Typography>
                </ListItemButton>
              </ListItem>
            </Link>
          ))}
        {isRoleBranchHead[0] === "Super Administrator" && (
          <>
            {superAdminOnly.map((item) => (
              <Link href={`/${item.url}`} style={{ textDecoration: "none" }}>
                <ListItem
                  disablePadding
                  style={{
                    textDecoration: "none",
                    color: "black",
                    backgroundColor:
                      pathname === `/${item.url}` ||
                      pathname === `/${item.url}/${item.insideUrl}`
                        ? "rgba(250, 185, 0, 0.15)"
                        : "transparent",
                    borderRight:
                      pathname === `/${item.url}` ||
                      pathname === `/${item.url}/${item.insideUrl}`
                        ? "2px solid rgba(250, 185, 0, 1)"
                        : "none",
                    "&:hover": {
                      textDecoration: "none",
                    },
                  }}
                >
                  <ListItemButton
                    key={item.title}
                    sx={{
                      "&:hover": {
                        textDecoration: "none",
                      },
                    }}
                  >
                    <ListItemIcon sx={{ objectFit: "contain" }}>
                      {React.createElement(item.icon)}
                    </ListItemIcon>
                    {/* <ListItemText  primary="Leads list" /> */}
                    <Typography sx={{ fontSize: "15px" }}>
                      {item.title}
                    </Typography>
                  </ListItemButton>
                </ListItem>
              </Link>
            ))}
          </>
        )}
      </List>
    </Grid>
  );
  // console.log(roleBranchHeadId);
  useEffect(() => {
    const storedData = localStorage.getItem("user");
    if (storedData) {
      const jsonData = JSON.parse(storedData);
      setUser(jsonData);
      setIsRoleBranchHead(jsonData?.role || []);
      setPermissions(jsonData?.permissions || []);
      setRoleBranchHeadId(jsonData?.companyId || "");
      if (pathname === "/") {
        router.push("/leads");
      }
      // console.log(user);
    } else {
      setUser(null);
      console.error('No data found in local storage for key "user".');
    }
    setLoading(false);
  }, []);
  // console.log(roleBranchHead);
  // useEffect(() => {
  //   if (user === null) {
  //     router.push("/login");
  //   }
  //   console.log("working router push");
  // }, []);`

  return (
    <Provider store={store}>
      <ThemeProvider theme={themeFont}>
        <SnackbarProvider maxSnack={3}>
          <html lang="en">
            <body className={inter.className}>
              {loading ? (
                <Box
                  sx={{
                    display: "flex",
                    justifyContent: "center",
                    alignItems: "center",
                    minHeight: "100vh",
                    backgroundColor: "white",
                  }}
                >
                  <CircularProgress />
                </Box>
              ) : user === null || user.isFirstSignIn === true ? (
                <Box
                  sx={{
                    minHeight: "100vh",
                    display: "flex",
                    backgroundColor: "white",
                    "@media (max-width: 1200px)": {
                      flexDirection: "column",
                      justifyContent: "center",
                      alignItems: "center",
                    },
                  }}
                >
                  <Grid
                    sx={{
                      width: "60%",
                      position: "relative",
                      "@media (max-width: 1200px)": {
                        display: "none",
                      },
                    }}
                  >
                    <Image
                      style={{ backgroundColor: "white" }}
                      src={LoginBanner}
                      // width="100%"
                      layout="fill"
                      objectFit="cover"
                    />
                  </Grid>
                  <Grid
                    sx={{
                      width: "40%",
                      "@media (max-width: 1200px)": {
                        display: "flex",
                        justifyContent: "center",
                        alignItems: "center",
                        // border: "1px solid black",
                        width: "80%",
                        gap: "20px",
                        height: "60vh",
                      },
                    }}
                  >
                    <Box
                      sx={{
                        width: "100%",
                        height: "100%",
                        display: "flex",
                        justifyContent: "center",
                        alignItems: "center",
                        flexDirection: "column",
                        gap: "20px",
                        // border: "1px solid black",
                        backgroundColor: "white",
                      }}
                    >
                      <Box
                        sx={{
                          height: "15%",
                          width: "250px",
                          display: "flex",
                          justifyContent: "center",
                          alignItems: "center",
                        }}
                      >
                        <Image
                          src="/Logo.svg"
                          width={300}
                          height={100}
                          style={{ objectFit: "contain" }}
                          alt="logo"
                        />
                      </Box>
                      <Box
                        sx={{
                          height: "50%",
                          width: "90%",
                        }}
                      >
                        <Login user={user} />
                      </Box>
                    </Box>
                  </Grid>
                </Box>
              ) : (
                <Box sx={{ display: "flex" }}>
                  <AppBar
                    position="fixed"
                    sx={{
                      width: { sm: `calc(100% - ${drawerWidth}px)` },
                      ml: { sm: `${drawerWidth}px` },
                      backgroundColor: "white",
                      boxShadow: "none",
                      borderBottom: "1px solid lightgrey",
                      height: isLargeScreen ? "89px" : "89px",
                    }}
                  >
                    <Toolbar
                      sx={{
                        display: "flex",
                        justifyContent: "space-between",
                        height: isLargeScreen ? "89px" : "89px",
                      }}
                    >
                      <IconButton
                        color="black"
                        aria-label="open drawer"
                        edge="start"
                        onClick={handleDrawerToggle}
                        sx={{ mr: 2, display: { sm: "none" } }}
                      >
                        <MenuIcon />
                      </IconButton>

                      <Grid
                        sx={{
                          minWidth: "15%",
                          color: "black",
                          // borderRight: "1px solid lightgrey",
                          // borderLeft: "1px solid lightgrey",
                          height: "100%",
                          padding: 0,
                          display: { xs: "none", sm: "flex" },
                          justifyContent: "center",
                          flexDirection: "column",
                          alignItems: "center",
                          // border:"1px solid black"
                        }}
                      >
                        <Grid
                          sx={{
                            // border: "1px solid black",
                            flexDirection: "column",
                            alignItems: "center",
                          }}
                        >
                          <Grid
                            sx={{
                              display: "flex",
                              // display: { xs: "none", sm: "flex" },
                            }}
                          >
                            <Typography variant="h6">Hello,&nbsp;</Typography>
                            <Typography variant="h6">
                              {user?.name.split(" ")[0]}
                            </Typography>
                          </Grid>
                          {/* <Typography
                            sx={{ fontSize: "10px", letterSpacing: "1px" }}
                          >
                            Welcome back!
                          </Typography> */}
                        </Grid>
                      </Grid>

                      <Grid
                        sx={{
                          minWidth: "26%",
                          color: "black",
                          height: "100%",
                          padding: 0,
                          display: "flex",
                          justifyContent: "space-between",
                          alignItems: "center",
                          paddingRight: "10px",
                          // border: "1px solid black",
                        }}
                      >
                        <Grid>
                          <Link href="/leads/addleads">
                            <Button
                              variant="outlined"
                              sx={{
                                backgroundColor: "rgba(0, 0, 0, 1)",
                                color: "rgba(255, 255, 255, 1)",
                                width: "120px",
                                height: "38px",
                                borderRadius: "10px",
                                fontSize: "13px",
                                fontWeight: "400",
                                "&:hover": {
                                  backgroundColor: "rgba(0, 0, 0, 1)",
                                  boxShadow: "none",
                                  border: "none",
                                },
                              }}
                            >
                              <Add sx={{ fontSize: "18px" }} />
                              Add Lead
                            </Button>
                          </Link>
                        </Grid>
                        <ProfileInfo name={user?.name} role={user?.role[0]} />
                        {/* <Grid
                          sx={{
                            minWidth: "120px",
                            heigth: "43px",
                            border: "1px solid #FAB900",
                            backgroundColor: "rgba(250, 185, 0, 0.2)",
                            borderRadius: "50px",
                            cursor: "pointer",
                            display: "flex",
                            alignItems: "center",
                            justifyContent: "space-between",
                            padding: "1px",
                          }}
                        >
                          <Box sx={{ flexGrow: 0 }}>
                            <Tooltip title="profile">
                              <IconButton
                                onClick={handleOpenUserMenu}
                                sx={{ p: "1px" }}
                              >
                                <Avatar alt="M" src="" />
                              </IconButton>
                            </Tooltip>
                            <Menu
                              sx={{ marginTop: "30px" }}
                              id="menu-appbar"
                              anchorEl={anchorElUser}
                              anchorOrigin={{
                                vertical: "top",
                                horizontal: "right",
                              }}
                              keepMounted
                              transformOrigin={{
                                vertical: "top",
                              }}
                              open={Boolean(anchorElUser)}
                              onClose={handleCloseUserMenu}
                              disableScrollLock
                            >
                              {settings?.map((setting) => (
                                <MenuItem
                                  key={setting}
                                  onClick={() => handleMenuClick(setting)}
                                >
                                  <Typography textAlign="center">
                                    {setting}
                                  </Typography>
                                </MenuItem>
                              ))}
                            </Menu>
                          </Box>
                          <Typography sx={{ padding: "5px" }}>
                            {user?.name}
                          </Typography>
                          <KeyboardArrowDownIcon />
                        </Grid> */}
                      </Grid>
                    </Toolbar>
                  </AppBar>
                  <Box
                    component="nav"
                    sx={{
                      width: { sm: drawerWidth },
                      flexShrink: { sm: 0 },
                      backgroundColor: "white",
                    }}
                    aria-label="profile folder"
                  >
                    <Drawer
                      variant="temporary"
                      open={mobileOpen}
                      onClose={handleDrawerToggle}
                      ModalProps={{
                        keepMounted: true,
                      }}
                      sx={{
                        display: { xs: "block", sm: "none" },
                        "& .MuiDrawer-paper": {
                          boxSizing: "border-box",
                          width: drawerWidth,
                        },
                      }}
                    >
                      {drawer}
                    </Drawer>
                    <Drawer
                      variant="permanent"
                      sx={{
                        display: { xs: "none", sm: "block" },
                        "& .MuiDrawer-paper": {
                          boxSizing: "border-box",
                          width: drawerWidth,
                        },
                      }}
                      open
                    >
                      {drawer}
                    </Drawer>
                  </Box>
                  <Box
                    component="div"
                    sx={{
                      flexGrow: 1,
                      width: { sm: `calc(100% - ${drawerWidth}px)` },
                      backgroundColor: "white",
                    }}
                  >
                    <Toolbar />
                    <Grid
                      sx={{
                        marginTop: "25px",
                        padding: "10px",
                        background: "#FFFCF3",
                      }}
                    >
                      {children}
                    </Grid>
                    <Grid
                      sx={{
                        // border: "1px solid black",
                        minHeight: "5vh",
                        display: "flex",
                        alignItems: "center",
                        justifyContent: "start",
                        color: "grey",
                      }}
                    >
                      <Typography sx={{ padding: "10px", marginLeft: "10px" }}>
                        © 2024 Hyderabad CP Portal
                      </Typography>
                    </Grid>
                  </Box>
                </Box>
              )}
            </body>
          </html>
        </SnackbarProvider>
      </ThemeProvider>
    </Provider>
  );
}
